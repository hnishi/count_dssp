#!/bin/perl
use strict;
use warnings;

### NAME
my $NAME = "count_dssp.pl"; 
### VESION 
my $VERSION = 5.1;

print "Program: $NAME \n";
print "Version: count_dssp $VERSION \n\n";


#*** SETTING ***
#my $filename = 'dssp_info_Final.txt';
my $filename = $ARGV[0];


my @seq1 = ();
my @len1 = ();
my @ss1 = ();
my @seq_ss1 = ();
while (<STDIN>) {
  chomp($_);
  last if ($_ eq '');
  push(@len1, $_);
  $_ = <STDIN>;
  chomp($_);
  last if ($_ eq '');
  push(@seq1, $_);
  $_ = <STDIN>;
  chomp($_);
  last if ($_ eq '');
  push(@ss1, $_);
}

if(scalar @ss1 ne scalar @seq1)
{
  die "ERROR: Lines of input should be even number $!";
}

#printf "Your input data\n";
for my $i (0..scalar(@ss1) -1) {
  #printf "%s\n", $i;
  #print "$seq1[$i], $ss1[$i] \n";
  $seq_ss1[$i] = $seq1[$i]."_".$ss1[$i];
}

my $n_query = scalar(@ss1);
#print "number of input sets: $n_query\n";

#printf "Number of elements in \@arr: %d\n", scalar(@arr);


my %nhelix;
my %nf;
%nhelix=map{ $_ => 0 } @seq_ss1;
%nf=map{ $_ => 0 } @seq_ss1;
foreach my $j (@seq_ss1)
{
  #print "$j \n";
  $nhelix{$j} = 0;
  $nf{$j} = 0;
}

#*** CODE ***

## 20 amino acid residues
#my @aa = ('A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y'); 
## 7 secondary structures + none
#my @ss = ('H','B','E','G','I','T','S',' ');


open(my $fh, '<:encoding(UTF-8)', $filename)
  or die "ERROR: Could not open file '$filename' $!";
 
# v4.0 2017/11/30
my $nhelix=0; my $nf=0; #normalization factor of KKEE

my $counter_pdb=0;
my $counter_all=0;
while (my $row = <$fh>) 
{
  $counter_pdb++;
  $row = <$fh>; # discard a line
  chomp $row;
  $counter_all+=length $row;
  #print "$counter_all \n";
  my @chars_aa = split("",$row);
  $row = <$fh>; # discard a line
  $row = <$fh>;
  chomp $row;
  my @chars_ss = split("",$row);
  #print "length: ", scalar @chars_aa, " ", scalar @chars_ss, "\n";
  if(scalar @chars_aa != scalar @chars_ss)
  {
    die "ERROR: The lengths of amino acid sequence and DSSP characters did not match at data $counter_pdb \n $!";
  }
  my $ii = 0;
  foreach my $i (@chars_aa)
  {

    my $i_query = 0;
    foreach my $iii (@seq_ss1)
    {
      #print  $len1[$i_query],"\n"; 
      #my $ss = $ss1[$i_query]; 
   
      my $jj = 0;
      my $flag1 = 0;
      my $flag2 = 0;
      my $flag3 = 0;

      #if($ii >= scalar @target -1)
      if($ii >= $len1[$i_query] -1)
      {
        my $jjj = 0;
        my $foo1 = join("",@chars_aa[$ii-$len1[$i_query]+1..$ii]);
        my $foo2 = join("",@chars_ss[$ii-$len1[$i_query]+1..$ii]);
        #print "\nDEBUG: ",@foo1,"\n";  
        
        if ($foo1 =~ m/$seq1[$i_query]/) { 
          $nf{$iii}++;
          if ($foo2 =~ m/$ss1[$i_query]/) { 
            $nhelix{$iii}++;
            #print "DEBUG: $foo1 $seq1[$i_query],   $foo2 $ss1[$i_query] \n";
            #print "DEBUG: id: $counter_pdb, i_query: $i_query, ii: $ii \n";
            #print "DEBUG: @chars_aa  \n";
            #print "DEBUG: @chars_ss  \n";
          }
        }
      }
      $i_query++;  
    }
    $ii++;
  }
}

### OUTPUT SECTION

print "number of input sets: $n_query\n";

foreach my $iii (@seq_ss1)
{
  print "\n";
  if($nf{$iii} == 0){
    print "$iii\n";
    print "Nhelix = $nhelix{$iii}, Ntotal = $nf{$iii}, Ratio = NA \n";
    next;
  }
  my $ratio = $nhelix{$iii}/$nf{$iii} ;
  print "$iii\n";
  print "Nhelix = $nhelix{$iii}, Ntotal = $nf{$iii}, Ratio = $ratio \n";
}
print "\nThe number of chains in database: $counter_pdb \n";


